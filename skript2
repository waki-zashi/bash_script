#!/bin/bash

set -e

TEST_LOG_DIR="$HOME/test_log"
BACKUP_DIR="$HOME/backup"

# Clean up test directories and create fresh ones
prepare_logs() {
    rm -rf "$TEST_LOG_DIR" "$BACKUP_DIR"
    mkdir -p "$TEST_LOG_DIR" "$BACKUP_DIR"
}

print_header() {
    echo "================================================================"
    echo "TEST: $1"
    echo "================================================================"
}

print_success() {
    echo "PASS: $1"
}

print_failure() {
    echo "FAIL: $1"
}

print_info() {
    echo "INFO: $1"
}

print_file_list() {
    echo "FILES: $1"
}

# Test 1: Small files below threshold - should not archive
print_header "1: Small files below threshold (no archiving expected)"
prepare_logs
for i in {1..5}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/log_$i.txt" bs=1K count=10 &> /dev/null
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 99
if [ $(find "$BACKUP_DIR" -name "*.tar.gz" | wc -l) -eq 0 ]; then
    print_success "No archives created - threshold not exceeded"
else
    print_failure "Unexpected archives found"
fi

# Test 2: Multiple small files - testing file sorting and selection
print_header "2: Multiple small files (archiving expected)"
prepare_logs
for i in {1..10}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/log_$i.txt" bs=1K count=$((i*5)) &> /dev/null
    sleep 0.1
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
if ls "$BACKUP_DIR"/*.tar.gz > /dev/null 2>&1; then
    print_success "Archive created successfully"
    archive_file=$(ls -t "$BACKUP_DIR"/*.tar.gz | head -1)
    file_count=$(tar -tzf "$archive_file" 2>/dev/null | wc -l)
    print_info "Archive contains $file_count files"
else
    print_failure "No backup archive found"
fi

# Test 3: Empty directory handling
print_header "3: Empty directory handling"
prepare_logs
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
if [ $(find "$BACKUP_DIR" -name "*.tar.gz" | wc -l) -eq 0 ]; then
    print_success "Correctly handled empty directory"
else
    print_failure "Unexpected archive created for empty directory"
fi

# Test 4: Backup directory creation
print_header "4: Backup directory creation"
prepare_logs
rm -rf "$BACKUP_DIR"
for i in {1..3}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/log_$i.txt" bs=1K count=50 &> /dev/null
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
if [ -d "$BACKUP_DIR" ]; then
    print_success "Backup directory created automatically"
    archive_count=$(find "$BACKUP_DIR" -name "*.tar.gz" | wc -l)
    print_info "Found $archive_count archive(s)"
else
    print_failure "Backup directory was not created"
fi

# Test 5: Large file archiving
print_header "5: Large file archiving verification"
prepare_logs
for i in {1..5}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/file_$i.log" bs=1M count=20 &> /dev/null
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
if ls "$BACKUP_DIR"/*.tar.gz > /dev/null 2>&1; then
    print_success "Large files archived successfully"
    archive_size=$(ls -lh "$BACKUP_DIR"/*.tar.gz | head -1 | awk '{print $5}')
    print_info "Archive size: $archive_size"
else
    print_failure "Failed to archive large files"
fi

# Test 6: Archive content verification
print_header "6: Archive content verification"
prepare_logs
for i in {1..8}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/logfile_$i.log" bs=1M count=15 &> /dev/null
    sleep 0.1
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
archive_file=$(ls "$BACKUP_DIR"/*.tar.gz 2>/dev/null | head -1)
if [ -n "$archive_file" ]; then
    file_count=$(tar -tzf "$archive_file" 2>/dev/null | wc -l)
    if [ $file_count -eq 8 ]; then
        print_success "All 8 files archived correctly"
    else
        print_failure "Expected 8 files, found $file_count"
    fi
else
    print_failure "No archive to verify"
fi


# Test 7: Low threshold behavior
print_header "7: Low threshold behavior"
prepare_logs
for i in {1..3}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/small_$i.log" bs=1M count=2 &> /dev/null
done
bash ./log_cleaner.sh "$TEST_LOG_DIR" 1
remaining_files=$(find "$TEST_LOG_DIR" -type f | wc -l)
backup_files=$(find "$BACKUP_DIR" -name "*.tar.gz" | wc -l)
if [ $remaining_files -eq 0 ] && [ $backup_files -gt 0 ]; then
    print_success "All files archived with low threshold"
else
    print_failure "Archiving incomplete: $remaining_files files remaining, $backup_files backups"
fi

# Test 8: Archiving order verification
print_header "8: Archiving order (oldest first)"
prepare_logs
for i in {1..8}; do
    dd if=/dev/zero of="$TEST_LOG_DIR/file_$(printf "%02d" $i).log" bs=1M count=5 &> /dev/null
    sleep 0.5
done

print_file_list "Files before archiving (newest first):"
ls -1t "$TEST_LOG_DIR"

bash ./log_cleaner.sh "$TEST_LOG_DIR" 1

archive_files=($(ls -t "$BACKUP_DIR"/*.tar.gz 2>/dev/null))
if [ ${#archive_files[@]} -gt 0 ]; then
    latest_archive="${archive_files[0]}"
    archived_files_list=$(tar -tzf "$latest_archive" 2>/dev/null | grep -v '/$')
    
    first_file=$(echo "$archived_files_list" | head -1)
    if [ "$first_file" = "file_01.log" ]; then
        print_success "Oldest file (file_01.log) archived first"
    else
        print_failure "Archiving order incorrect. First file: $first_file"
    fi
    
    archived_count=$(echo "$archived_files_list" | wc -l)
    print_info "Total files archived: $archived_count"
    
    echo ""
    print_file_list "Archived files in order:"
    echo "$archived_files_list"
else
    print_failure "No archives found for order verification"
fi

# Test 9: Input validation
print_header "9: Input validation"
prepare_logs

# Test invalid string input
if bash ./log_cleaner.sh "$TEST_LOG_DIR" "abc" 2>/dev/null; then
    print_failure "Accepted string instead of number"
else
    print_success "Rejected string input"
fi

# Test negative number
if bash ./log_cleaner.sh "$TEST_LOG_DIR" -5 2>/dev/null; then
    print_failure "Accepted negative number"
else
    print_success "Rejected negative number"
fi

# Test number > 100
if bash ./log_cleaner.sh "$TEST_LOG_DIR" 150 2>/dev/null; then
    print_failure "Accepted number > 100"
else
    print_success "Rejected number > 100"
fi

# Final summary
echo ""
echo "================================================================"
echo "TEST SUMMARY COMPLETED"
echo "================================================================"
echo "All tests finished execution"
echo "Check results above for any failures"
echo "================================================================"
